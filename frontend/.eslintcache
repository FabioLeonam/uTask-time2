[{"/home/fabioleonam/Documentos/GitHub/uTask-time2/frontend/src/components/Task/index.js":"1","/home/fabioleonam/Documentos/GitHub/uTask-time2/frontend/src/pages/Home/index.js":"2","/home/fabioleonam/Documentos/GitHub/uTask-time2/frontend/src/reportWebVitals.js":"3","/home/fabioleonam/Documentos/GitHub/uTask-time2/frontend/src/services/api.js":"4","/home/fabioleonam/Documentos/GitHub/uTask-time2/frontend/src/index.js":"5","/home/fabioleonam/Documentos/GitHub/uTask-time2/frontend/src/App.js":"6"},{"size":852,"mtime":1611670155205,"results":"7","hashOfConfig":"8"},{"size":2673,"mtime":1611622546639,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611580052060,"results":"10","hashOfConfig":"8"},{"size":115,"mtime":1611594451066,"results":"11","hashOfConfig":"8"},{"size":502,"mtime":1611580052056,"results":"12","hashOfConfig":"8"},{"size":162,"mtime":1611580052020,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1iihnjm",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/fabioleonam/Documentos/GitHub/uTask-time2/frontend/src/components/Task/index.js",[],"/home/fabioleonam/Documentos/GitHub/uTask-time2/frontend/src/pages/Home/index.js",["27","28"],"import React, { useEffect, useState } from \"react\";\nimport Task from \"../../components/Task\";\nimport beach from \"../../assets/beach.svg\";\nimport plus from \"../../assets/plus.svg\";\nimport api from \"../../services/api\";\nimport \"./style.css\";\n\nconst Home = () => {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    getTasks()\n  }, [tasks])\n  \n  async function handleSubmit(event){\n    event.preventDefault();\n\n    const inputText = event.target.querySelector('input');\n    if(inputText.value.trim() === '') return\n\n    const data = {\n      taskText: inputText.value,\n      taskStatus: 0\n    }\n\n    await api.post('tasks', data);\n\n    inputText.value = '';\n  }\n\n  async function getTasks(){\n    await api.get('tasks').then(res => setTasks(res.data));\n  }\n\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1 className=\"u-task\">uTask</h1>\n\n        <form className=\"inputTask\" onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"todoInput\"\n            placeholder=\"Adicione uma tarefa\"\n          />\n          <button className=\"submitButton\" type=\"submit\">\n            <img src={plus} alt=\"Adicionar tarefa\" />\n          </button>\n        </form>\n      </header>\n\n      <div className=\"todo-container\">\n        <span className=\"titleBox\">TODO</span>\n        <div className=\"taskToDo\">\n          \n          {tasks.filter(task => !task.taskStatus).length !== 0 ?\n            tasks.map((task) => {\n              if(!task.taskStatus){\n                return(<Task \n                  key={task._id}\n                  id={task._id}\n                  inputText={task.taskText}\n                  status={task.taskStatus} />)\n              }\n            }) :\n              (\n                <div className=\"empty\">\n                  <img src={beach} alt=\"Sem tarefas\" />\n                  <span>Nada por aqui!</span>\n                </div>\n              )\n          \n          }\n        </div> \n        \n        <span className=\"titleBox\">DONE</span>\n        <div className=\"taskDone\">\n        {tasks.filter(task => task.taskStatus).length !== 0 ?\n            tasks.map((task) => {\n              if(task.taskStatus){\n                return(<Task\n                  key={task._id}\n                  id={task._id}\n                  inputText={task.taskText}\n                  status={task.taskStatus} />\n                )\n              }\n            }) :\n            (\n              <div className=\"empty\">\n              <img src={beach} alt=\"Sem tarefas\" />\n              <span>Nada por aqui!</span>\n              </div>\n            )\n          \n          }\n        </div>\n      </div>\n    </>\n  );\n};\nexport default Home;\n","/home/fabioleonam/Documentos/GitHub/uTask-time2/frontend/src/reportWebVitals.js",[],"/home/fabioleonam/Documentos/GitHub/uTask-time2/frontend/src/services/api.js",[],"/home/fabioleonam/Documentos/GitHub/uTask-time2/frontend/src/index.js",[],"/home/fabioleonam/Documentos/GitHub/uTask-time2/frontend/src/App.js",[],{"ruleId":"29","severity":1,"message":"30","line":58,"column":30,"nodeType":"31","messageId":"32","endLine":58,"endColumn":32},{"ruleId":"29","severity":1,"message":"30","line":80,"column":30,"nodeType":"31","messageId":"32","endLine":80,"endColumn":32},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd"]